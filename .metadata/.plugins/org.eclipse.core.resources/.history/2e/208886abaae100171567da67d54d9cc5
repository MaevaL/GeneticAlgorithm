import java.util.ArrayList;

public class TravellingSalesmanProblem {

	public TravellingSalesmanProblem() {
		// TODO Auto-generated constructor stub
	}
	
	   public static PathTraveler crossover(PathTraveler parent1, PathTraveler parent2) {
	        // Create new child tour
		   PathTraveler child = new PathTraveler();

	        // Get start and end sub tour positions for parent1's tour
	        int startPos = (int) (Math.random() * City.citiesArray.size());
	        int endPos = (int) (Math.random() * City.citiesArray.size());

	        // Loop and add the sub tour from parent1 to our child
	        for (int i = 0; i < child.tourSize(); i++) {
	            // If our start position is less than the end position
	            if (startPos < endPos && i > startPos && i < endPos) {
	                child.setCity(i, parent1.getCity(i));
	            } // If our start position is larger
	            else if (startPos > endPos) {
	                if (!(i < startPos && i > endPos)) {
	                    child.setCity(i, parent1.getCity(i));
	                }
	            }
	        }

	        // Loop through parent2's city tour
	        for (int i = 0; i < parent2.tourSize(); i++) {
	            // If child doesn't have the city add it
	            if (!child.containsCity(parent2.getCity(i))) {
	                // Loop to find a spare position in the child's tour
	                for (int ii = 0; ii < child.tourSize(); ii++) {
	                    // Spare position found, add city
	                    if (child.getCity(ii) == null) {
	                        child.setCity(ii, parent2.getCity(i));
	                        break;
	                    }
	                }
	            }
	        }
	        return child;
	    }

	public static void main(String[] args) {
		Generation generation = new Generation(100);
		generation.GenerateCities(10);
		for(City city : City.citiesArray) {
			System.out.println(city.toString());
		}
		
		System.out.println("\n");
		PathBetweenTwoCities.GenerateMatrice();
		
		for(PathBetweenTwoCities p : PathBetweenTwoCities.pathArray) {
			System.out.println(p.toString());
		}
		
		for(int i = 0; i < 10; i++) {
			PathTraveler.GenerateAPathBetweenAllCities();
		}
		
		for(int i = 0; i < PathTraveler.pathTravelerArray.size(); i++) {
			for(int j =0; j < City.citiesArray.size(); j++)
				System.out.println("IndexPath : " + PathTraveler.pathTravelerArray.indexOf(PathTraveler.pathTravelerArray.get(i))+ " CityIndex : " + PathTraveler.pathTravelerArray.get(i).get(j).getIndex());
		}
		
		for(int i = 0; i < PathTraveler.pathTravelerArray.size(); i++) {
			System.out.println(PathTraveler.getDistanceForAPath(i));
		}
		
		PathTraveler.saveDistanceForAllPath();
		
		System.out.println("Best distance : " + PathTraveler.getBestDistance());
		
	}
}
