import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Paint;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class TravellingSalesmanProblem extends Frame{

	public TravellingSalesmanProblem() {
		setSize(800	, 800);
		setVisible(true);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			};
		});
	}
	
	public static List<City> crossOver(List<City> p1, List<City> p2) {
		List<City> crossed = new ArrayList<City>();
		int cut = p1.size()/2;
		
		for(int i = 0; i < cut; i++) {
			crossed.add(p1.get(i));
		}
		
		for(int j = 0; j < p2.size(); j++) {
			if(!crossed.contains(p2.get(j))) {
				crossed.add(p2.get(j));
			}
		}
		
		return crossed;
	}

	public static void main(String[] args) {
//		Generation generation = new Generation(100);
//		generation.GenerateCities(10);
//		for(City city : City.citiesArray) {
//			System.out.println(city.toString());
//		}
//		
//		System.out.println("\n");
//		PathBetweenTwoCities.GenerateMatrice();
//		
//		for(PathBetweenTwoCities p : PathBetweenTwoCities.pathArray) {
//			System.out.println(p.toString());
//		}
//		
//		for(int i = 0; i < 10; i++) {
//			PathTraveler.GenerateAPathBetweenAllCities();
//		}
//		
//		for(int i = 0; i < PathTraveler.pathTravelerArray.size(); i++) {
//			for(int j =0; j < City.citiesArray.size(); j++)
//				System.out.println("IndexPath : " + PathTraveler.pathTravelerArray.indexOf(PathTraveler.pathTravelerArray.get(i))+ " CityIndex : " + PathTraveler.pathTravelerArray.get(i).get(j).getIndex());
//		}
//		
//		for(int i = 0; i < PathTraveler.pathTravelerArray.size(); i++) {
////			System.out.println(PathTraveler.getDistanceForAPath(i));
//			System.out.println(PathTraveler.getDistance(PathTraveler.pathTravelerArray.get(i)));
//		}		
//		
//		
//		System.out.println("Best distance : " + PathTraveler.getBestDistance());
//		
//		List<List<City>> sortingBest = PathTraveler.getNBest(5);
//		
//		for(int i = 0; i < sortingBest.size(); i++) {
//			System.out.println(PathTraveler.getDistance(sortingBest.get(i)));
//		}
//		
//		// works
//		List<City> p1 = new ArrayList<City>(PathTraveler.pathTravelerArray.get(0));
//		System.out.println(p1.toString());
//		List<City> p2 = new ArrayList<City>(PathTraveler.pathTravelerArray.get(1));
//		System.out.println(p2.toString());
//		
//		List<City> resultCrossed = TravellingSalesmanProblem.crossOver(p1, p2);
//		System.out.println(resultCrossed.toString());
		
		//Initial population
		Generation generation = new Generation(100); // seed
		generation.GenerateCities(10);
		for(City city : City.citiesArray) {
		System.out.println(city.toString());
	}
		PathBetweenTwoCities.GenerateMatrice(); //generate path between each cities and calculate the distance
		int nbIndivual = 50;
		for(int i = 0; i < nbIndivual; i++) {
			PathTraveler.GenerateAPathBetweenAllCities(); //generate 50 individuals
		}
		
		int nbGen = 100;
		int nbBest = 10;
		
		int randomIndice1 = 0;
		int randomIndice2 = 0;
		Random generator = new Random();
		List<List<City>> newPathCities = new ArrayList<List<City>>();
		for(int i = 0; i < nbGen; i++) {
			List<List<City>> nBest = PathTraveler.getNBest(nbBest);
			for(int j = 0; j < nbIndivual - nbBest; j++) {
				randomIndice1 = Math.abs(generator.nextInt()%nbIndivual);
				randomIndice2 = Math.abs(generator.nextInt()%nbIndivual);
				while(randomIndice1 == randomIndice2) {
					randomIndice1 = Math.abs(generator.nextInt()%nbIndivual);
					randomIndice2 = Math.abs(generator.nextInt()%nbIndivual);
				}
				List<City> parent1 = new ArrayList<City>(PathTraveler.pathTravelerArray.get(randomIndice1));
				List<City> parent2 = new ArrayList<City>(PathTraveler.pathTravelerArray.get(randomIndice2));
				List<City> crossed = TravellingSalesmanProblem.crossOver(parent1, parent2);	
				newPathCities.add(crossed);
			}
			
			newPathCities.addAll(nBest);
			PathTraveler.pathTravelerArray = newPathCities;		
		}
		
		System.out.println(PathTraveler.getBestDistance());
		
		new TravellingSalesmanProblem();
		
	}
	
	@Override
	public void paint(Graphics g) {
		super.paint(g);
		g.setColor(Color.BLACK);
		for(int i = 0; i < City.citiesArray.size(); i++) {
			g.drawRect(200 + (20*(int)City.citiesArray.get(i).getLocation().getX()), 200 + (20*(int)City.citiesArray.get(i).getLocation().getY()), 5, 5);
		}	
	}
}
